public final class kt/fluxo/core/FluxoClosedException : java/util/concurrent/CancellationException, kt/fluxo/core/FluxoException {
	public synthetic fun getCause ()Ljava/lang/Throwable;
}

public final class kt/fluxo/core/FluxoDsl {
	public static final fun closeStoreAndWait (Lkt/fluxo/core/Store;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun repeatOnSubscriptionIn (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/String;JLkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun repeatOnSubscriptionIn$default (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/String;JLkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class kt/fluxo/core/FluxoException {
}

public class kt/fluxo/core/FluxoRuntimeException : java/lang/RuntimeException, kt/fluxo/core/FluxoException {
}

public final class kt/fluxo/core/FluxoSettings {
	public static final field DEFAULT Lkt/fluxo/core/FluxoSettings;
	public static final field Factory Lkt/fluxo/core/FluxoSettings$Factory;
	public final fun bootstrapperJob (Ljava/lang/String;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;)V
	public static synthetic fun bootstrapperJob$default (Lkt/fluxo/core/FluxoSettings;Ljava/lang/String;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)V
	public final fun copy ()Lkt/fluxo/core/FluxoSettings;
	public final fun getBootstrapper ()Lkotlin/jvm/functions/Function2;
	public final fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getDebugChecks ()Z
	public final fun getExceptionHandler ()Lkotlinx/coroutines/CoroutineExceptionHandler;
	public final fun getInputStrategy ()Lkt/fluxo/core/InputStrategy;
	public final fun getIntentFilter ()Lkotlin/jvm/functions/Function2;
	public final fun getName ()Ljava/lang/String;
	public final fun getScope ()Lkotlinx/coroutines/CoroutineScope;
	public final fun getSideEffectBufferSize ()I
	public final fun getSideEffectsStrategy ()Lkt/fluxo/core/SideEffectsStrategy;
	public final fun getSideJobsContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun isCloseOnExceptions ()Z
	public final fun isLazy ()Z
	public final fun isOptimized ()Z
	public final fun setBootstrapper (Lkotlin/jvm/functions/Function2;)V
	public final fun setCloseOnExceptions (Z)V
	public final fun setCoroutineContext (Lkotlin/coroutines/CoroutineContext;)V
	public final fun setDebugChecks (Z)V
	public final fun setExceptionHandler (Lkotlinx/coroutines/CoroutineExceptionHandler;)V
	public final fun setInputStrategy (Lkt/fluxo/core/InputStrategy;)V
	public final fun setIntentFilter (Lkotlin/jvm/functions/Function2;)V
	public final fun setLazy (Z)V
	public final fun setName (Ljava/lang/String;)V
	public final fun setOptimized (Z)V
	public final fun setScope (Lkotlinx/coroutines/CoroutineScope;)V
	public final fun setSideEffectBufferSize (I)V
	public final fun setSideEffectsStrategy (Lkt/fluxo/core/SideEffectsStrategy;)V
	public final fun setSideJobsContext (Lkotlin/coroutines/CoroutineContext;)V
}

public final class kt/fluxo/core/FluxoSettings$Factory {
	public final fun create ()Lkt/fluxo/core/FluxoSettings;
}

public abstract class kt/fluxo/core/InputStrategy {
	public static final field InBox Lkt/fluxo/core/InputStrategy$InBox;
	public fun <init> ()V
	public fun createQueue (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/channels/Channel;
	public fun getParallelProcessing ()Z
	public fun getResendUndelivered ()Z
	public fun getRollbackOnCancellation ()Z
	public abstract fun processRequests (Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class kt/fluxo/core/InputStrategy$InBox {
	public final fun Fifo ()Lkt/fluxo/core/InputStrategy;
	public final fun Lifo ()Lkt/fluxo/core/InputStrategy;
	public final fun Parallel ()Lkt/fluxo/core/InputStrategy;
}

public abstract interface class kt/fluxo/core/IntentHandler {
	public abstract fun handleIntent (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class kt/fluxo/core/SideEffectsStrategy {
}

public final class kt/fluxo/core/SideEffectsStrategy$CONSUME : kt/fluxo/core/SideEffectsStrategy {
	public static final field INSTANCE Lkt/fluxo/core/SideEffectsStrategy$CONSUME;
	public fun toString ()Ljava/lang/String;
}

public final class kt/fluxo/core/SideEffectsStrategy$DISABLE : kt/fluxo/core/SideEffectsStrategy {
	public static final field INSTANCE Lkt/fluxo/core/SideEffectsStrategy$DISABLE;
	public fun toString ()Ljava/lang/String;
}

public final class kt/fluxo/core/SideEffectsStrategy$RECEIVE : kt/fluxo/core/SideEffectsStrategy {
	public static final field INSTANCE Lkt/fluxo/core/SideEffectsStrategy$RECEIVE;
	public fun toString ()Ljava/lang/String;
}

public final class kt/fluxo/core/SideEffectsStrategy$SHARE : kt/fluxo/core/SideEffectsStrategy {
	public final field replay I
	public fun <init> ()V
	public fun <init> (I)V
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class kt/fluxo/core/Store : java/io/Closeable, kotlinx/coroutines/CoroutineScope, kotlinx/coroutines/flow/FlowCollector, kotlinx/coroutines/flow/StateFlow {
	public fun async (Ljava/lang/String;Lkotlin/jvm/functions/Function3;)V
	public static synthetic fun async$default (Lkt/fluxo/core/Store;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)V
	public fun close ()V
	public abstract fun emit (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getSubscriptionCount ()Lkotlinx/coroutines/flow/StateFlow;
	public fun launch (Ljava/lang/String;Lkotlin/jvm/functions/Function3;)V
	public static synthetic fun launch$default (Lkt/fluxo/core/Store;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)V
	public abstract fun send (Ljava/lang/Object;)Lkotlinx/coroutines/Job;
	public abstract fun start ()Lkotlinx/coroutines/Job;
}

public abstract interface class kt/fluxo/core/StoreSE : kt/fluxo/core/Store {
	public abstract fun getSideEffectFlow ()Lkotlinx/coroutines/flow/Flow;
}

public abstract interface annotation class kt/fluxo/core/annotation/ExperimentalFluxoApi : java/lang/annotation/Annotation {
}

public abstract interface annotation class kt/fluxo/core/annotation/FluxoDsl : java/lang/annotation/Annotation {
}

public abstract interface annotation class kt/fluxo/core/annotation/InternalFluxoApi : java/lang/annotation/Annotation {
}

public class kt/fluxo/core/data/GuaranteedEffect : java/io/Closeable {
	public fun <init> (Ljava/lang/Object;)V
	public fun close ()V
	public final fun getContent ()Ljava/lang/Object;
	public final fun getRawContent ()Ljava/lang/Object;
	public final fun handleOrResend (Lkotlin/jvm/functions/Function1;)Z
	public final fun resend ()V
}

public abstract interface class kt/fluxo/core/dsl/BootstrapperScope : kt/fluxo/core/dsl/StoreScope {
	public abstract fun emit (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send (Ljava/lang/Object;)Lkotlinx/coroutines/Job;
}

public abstract interface class kt/fluxo/core/dsl/ContainerHost {
	public abstract fun getContainer ()Lkt/fluxo/core/StoreSE;
}

public abstract interface class kt/fluxo/core/dsl/InterceptorScope : kotlinx/coroutines/CoroutineScope {
	public abstract fun getStoreName ()Ljava/lang/String;
	public abstract fun postRequest (Lkt/fluxo/core/intercept/StoreRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class kt/fluxo/core/dsl/SideJobScope : kotlinx/coroutines/CoroutineScope {
	public abstract fun emit (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getCurrentStateWhenStarted ()Ljava/lang/Object;
	public abstract fun postSideEffect (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send (Ljava/lang/Object;)Lkotlinx/coroutines/Job;
	public abstract fun updateState (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class kt/fluxo/core/dsl/StoreScope : kotlinx/coroutines/CoroutineScope {
	public synthetic fun async (Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)V
	public static synthetic fun async$default (Lkt/fluxo/core/dsl/StoreScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)V
	public abstract fun getSubscriptionCount ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getValue ()Ljava/lang/Object;
	public synthetic fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/Job;
	public static synthetic fun launch$default (Lkt/fluxo/core/dsl/StoreScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)Lkotlinx/coroutines/Job;
	public fun noOp ()V
	public abstract fun postSideEffect (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun reduce (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun reduce$suspendImpl (Lkt/fluxo/core/dsl/StoreScope;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun sideJob (Ljava/lang/String;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun sideJob$default (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/String;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public abstract fun updateState (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class kt/fluxo/core/intercept/StoreRequest {
}

public final class kt/fluxo/core/intercept/StoreRequest$HandleIntent : kt/fluxo/core/intercept/StoreRequest {
	public fun <init> (Ljava/lang/Object;Lkotlinx/coroutines/CompletableDeferred;)V
	public synthetic fun <init> (Ljava/lang/Object;Lkotlinx/coroutines/CompletableDeferred;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getDeferred ()Lkotlinx/coroutines/CompletableDeferred;
	public final fun getIntent ()Ljava/lang/Object;
}

public final class kt/fluxo/core/intercept/StoreRequest$RestoreState : kt/fluxo/core/intercept/StoreRequest {
	public fun <init> (Ljava/lang/Object;Lkotlinx/coroutines/CompletableDeferred;)V
	public synthetic fun <init> (Ljava/lang/Object;Lkotlinx/coroutines/CompletableDeferred;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getDeferred ()Lkotlinx/coroutines/CompletableDeferred;
	public final fun getState ()Ljava/lang/Object;
}

public final class kt/fluxo/core/internal/FluxoIntentHandler : kt/fluxo/core/IntentHandler {
	public static final field INSTANCE Lkt/fluxo/core/internal/FluxoIntentHandler;
	public synthetic fun handleIntent (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleIntent (Lkt/fluxo/core/dsl/StoreScope;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class kt/fluxo/core/internal/FluxoStore : kotlin/coroutines/AbstractCoroutineContextElement, kotlinx/coroutines/CoroutineExceptionHandler, kt/fluxo/core/StoreSE {
	public fun <init> (Ljava/lang/Object;Lkt/fluxo/core/IntentHandler;Lkt/fluxo/core/FluxoSettings;)V
	public synthetic fun collect (Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun emit (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getName ()Ljava/lang/String;
	public synthetic fun getReplayCache ()Ljava/util/List;
	public fun getSideEffectFlow ()Lkotlinx/coroutines/flow/Flow;
	public fun getSubscriptionCount ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getValue ()Ljava/lang/Object;
	public fun handleException (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V
	public fun send (Ljava/lang/Object;)Lkotlinx/coroutines/Job;
	public fun setValue (Ljava/lang/Object;)V
	public fun start ()Lkotlinx/coroutines/Job;
	public fun toString ()Ljava/lang/String;
}

public final class kt/fluxo/core/internal/ReducerIntentHandler : kt/fluxo/core/IntentHandler {
	public fun <init> (Lkotlin/jvm/functions/Function2;)V
	public fun handleIntent (Lkt/fluxo/core/dsl/StoreScope;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

